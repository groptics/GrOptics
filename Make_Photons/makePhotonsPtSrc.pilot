pilot file to create flasher photons. You can plot the final location
of the photon by ploting xlast vs ylast in the root history file for T1.
The status parameter codes the type of final location as follows:
    status     meaning
      0          kRun
      1		 kStop
      2		 kExit
      3		 kFocus
      4		 kSuspend
      5		 kAbsorb

These are used in the ROBAST code to determine when to stop tracking
the photon. So, cut on status and plot either zlast or xlast vs ylast
to see the details.  The zlast plot will show peaks at the z values of
the primary, secondary, and camera locations.  The kExit occurs if the
photon exits the top volume of the geometry. e.g. at z = +-15 meters.

Adding the flasher was straightforward. Search on "Flasher"
in GSegSCTelescope.cpp to see the changes. You'll see that I only
changed the injection location for the photons, i.e. we don't want
to inject from the top of the top volume.
I also reduced the radius in the MIROR record in this file so more
photons would strike the camera;  I haven't tried to optimize this.

Finally, if the flasher addition appears useful, I can add a flasher
option.  There are actually two alternatives.  Use an external photon
file as we have here.  Or create the photons internally.  If done
internally, we should probably add to the ARRAYTEL records a flasher on/off
flag, flasher position (x,y,z), and wavelength; the code can figure out
the angular spread given the camera radius and location.

This has been fun.  I haven't looked at the code in some time.

   version: 6.1.0    date: 2014-05-06
   makePhotonsPtSrc.cpp produces a grisudet compatible .cph file 
   of cherenkov photons from a designated point source. 
   The photons are randomly placed on the telescope area with  
   radius increased by 10%.  Telescope locations and radii are from 
   a standard GrISU telescope configuration file. The code has 
   a ROOT dependency. All input information designated by this pilot file.

   All log information goes to cerr.

   Testing of this code is straightforward using a photon_history debug
   file (see the DEBUG record in detector.pilot). This history file may
   be converted to a root tree in GrISU/Utilities/Diagnostics.

   usage:  makePhotonsPtSrc [name of pilotfile: default makePhotonsPtSrc.pilot]

   Coor.System: ground X(East), Y(North), Z(up). When pointing to zenith
   as is always the case here, the telescope axes are parallel to these
   ground coordinate axes.  The camera axes are slightly different, camera
   X axis is parallel to the telescope x axis; the camera y axis is
   opposite to the telescope y axis (thus permitting x camera to the right and y
   camera up when facing the camera with telescope in stow position).

    OUTFL <filename: default stdout> 
    formatted as .cph input file to grisudet
* OUTFL starPtSrc.cph

    CONFG  <filename: no default>
	GrISU-type configuration file,
	needed for telescope locations and radii
 CONFG ../../Config/Files/veritas2013Feb1_GrISU_version5.0.0.cfg
 CONFG ../../Config/Files/veritas2013Sept16_GrISU_version6.0.0.cfg
 CONFG ../Config/devSegSCTelescopes.cfg
 CONFG ../Config/arrayConfig.cfg
* CONFG ./makePhotonsPtSrc.pilot

    NUMBR <numevents: default 1> <numphotons: default 10000
* NUMBR  1 500000
 NUMBR  1 1000


  SRCPT <x:default 0.0> <y: default 0.0> <z:default 10000.0>
  photon point source location, ground system coor.system: 
       x: East, y:North, z:Up, origin at array origin, i.e.
       same coor. system as telescope locations in config. file.
       The height is not from sea level!
 SRCPT 0.0 0.0 8.35
* SRCPT 0.0 0.0 7.8

    SEEDR <integer: default 0>
       random number generator seed for TRandom3
* SEEDR 63565

H record in cph file, height of observatory, default 1277.06
* OBSER 1307.645000

 TLLOC 1 75.0   0.0   0.0    0.0 0.0  0
* TLLOC 1 0.0   0.0   0.0    0.0 0.0  0

  MIROR 1 4.8319 5.6 0. 2 48
* MIROR 1 2.3 2.0 0. 2 48

